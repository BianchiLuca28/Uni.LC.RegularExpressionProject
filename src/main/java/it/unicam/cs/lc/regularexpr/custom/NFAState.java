package it.unicam.cs.lc.regularexpr.custom;

import java.util.ArrayList;
import java.util.List;

/**
 * This class represents a State in the NFA generated by the Thompson Algorithm.
 * In fact, it has some simple attributes inside that helps to define the state.
 *
 * @author Luca Bianchi
 */
public class NFAState {

    // This is the name of the State
    private String nameState;
    // This attribute describe if the state is initial or not (true if it is, false otherwise)
    private boolean initial;
    // This attribute describe if the state is final or not (true if it is, false otherwise)
    private boolean accept;
    // This attribute represents the outgoing transitions from the state to other states of the NFA
    private List<NFATransition> outgoingTransitions;

    // This is just a static variable to assign different name to the name of the states using an incremental number
    // starting from 0
    private static int currentNumName = 0;

    public NFAState(boolean initial, boolean accept) {
        this.nameState = Integer.toString(this.currentNumName);
        this.currentNumName++;
        this.initial = initial;
        this.accept = accept;
        this.outgoingTransitions = new ArrayList<>();
    }

    /**
     * Returns the outgoing transitions
     * @return outgoing transitions
     */
    public List<NFATransition> getOutgoingTransitions() {
        return this.outgoingTransitions;
    }

    /**
     * Returns true if the state is final, false otherwise
     * @return true if the state is final, false otherwise
     */
    public boolean getAccept() {
        return this.accept;
    }

    /**
     * This method toggles the initial attribute, so basically if it was true it becomes false and vice-versa
     */
    public void toggleInitial() {
        this.initial = !this.initial;
    }

    /**
     * This method toggles the final attribute, so basically if it was true it becomes false and vice-versa
     */
    public void toggleAccept() {
        this.accept = !this.accept;
    }

    /**
     * This method adds a new NFATransition to the list of outgoing transitions of the state
     * @param end NFAState where the NFATransition ends
     * @param symbol String with which the Transition is triggered
     */
    public void addTransition(NFAState end, String symbol) {
        this.outgoingTransitions.add(new NFATransition(this, end, symbol));
    }

    /**
     * This method adds a new NFATransition to the list of outgoing transitions of the state
     * @param outgoingTransition NFATransition to add
     */
    public void addTransition(NFATransition outgoingTransition) {
        this.outgoingTransitions.add(outgoingTransition);
    }

}
